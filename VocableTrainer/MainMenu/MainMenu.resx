<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox3.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>